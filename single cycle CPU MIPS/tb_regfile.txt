library ieee;
use IEEE.std_logic_1164.all;
use IEEE.NUMERIC_STD.ALL;

entity tb_regfile is
end tb_regfile;

architecture testbench of tb_regfile is

	constant CLOCK_PERIOD  : time := 10 ns;
	constant buswidth : integer := 32;
	constant addressWidth: integer := 5;
	constant numberOfRegisters: integer := 32;

    -- Signale fuer die Testbench
	signal clock           : std_logic;
	signal reset           : std_logic;
	signal writeEN         : std_logic;
	signal addr_Ra         : std_logic_vector(addressWidth-1 downto 0);
	signal addr_Rb         : std_logic_vector(addressWidth-1 downto 0);
	signal addr_Rc         : std_logic_vector(addressWidth-1 downto 0);
	
	signal dataIn_Rc :  std_logic_vector(buswidth-1 downto 0);
    signal dataOut_Ra : std_logic_vector(buswidth-1 downto 0);
    signal dataOut_Rb : std_logic_vector(buswidth-1 downto 0);
    
	
	component regfile
	generic ( constant addressWidth: integer := 5;
              constant buswidth: integer := 32;
              constant numberOfRegisters: integer := 32);
    Port    ( addr_Ra : in std_logic_vector(addressWidth-1 downto 0);
              addr_Rb : in std_logic_vector(addressWidth-1 downto 0);
              addr_Rc : in std_logic_vector(addressWidth-1 downto 0);
              dataIn_Rc : in std_logic_vector(buswidth-1 downto 0);
              dataOut_Ra : out std_logic_vector(buswidth-1 downto 0);
              dataOut_Rb : out std_logic_vector(buswidth-1 downto 0);
              writeEN : in std_logic;
              reset : in std_logic;
              clk : in std_logic );
    end component;

begin

-- instantiate an instance of the signal barrier
uut: regfile
generic map (buswidth => buswidth,
             addressWidth => addressWidth,
             numberOfRegisters => numberOfRegisters)
port map(
	addr_Ra => addr_Ra,
	addr_Rb => addr_Rb,
	addr_Rc => addr_Rc,
	dataIn_Rc => dataIn_Rc,
	dataOut_Ra => dataOut_Ra,
	dataOut_Rb => dataOut_Rb,
	writeEN => writeEN,
	clk => clock,
	reset => reset);

-- generate a (virtual) simulation clock
generate_sim_clock: process
begin
	clock <= '1';
	wait for CLOCK_PERIOD/2;
	clock <= '0';
	wait for CLOCK_PERIOD/2;
end process;

-- a simple testbench process:
-- reset the unit under test and afterwards assign various input values
stimuli: process
begin
	-- set input signals to initial value (no undefined values)
	reset <= '0';
	writeEN <= '0'; 
	addr_Ra  <= (others => '0');
	addr_Rb <= (others => '0');
	addr_Rc <= (others => '0');
	
	dataIn_Rc <= (others => '0');

    wait for CLOCK_PERIOD*2;
    reset <= '1';
    
	wait for CLOCK_PERIOD*2;
	
	reset <= '0';
	writeEN <= '0'; 
	addr_Ra  <= std_logic_vector(to_unsigned(25, addr_Ra'length));
	addr_Rb <= std_logic_vector(to_unsigned(18, addr_Ra'length));
	addr_Rc <= std_logic_vector(to_unsigned(25, addr_Ra'length));
	
	dataIn_Rc <= std_logic_vector(to_unsigned(120, dataIn_Rc'length));
	
    wait for CLOCK_PERIOD*2;
    
    writeEN <= '1';
    
    wait for CLOCK_PERIOD;
    
    writeEN <= '0';
    
    wait for CLOCK_PERIOD*2;
    
    addr_Ra  <= std_logic_vector(to_unsigned(18, addr_Ra'length));
    dataIn_Rc <= std_logic_vector(to_unsigned(17, dataIn_Rc'length));
    addr_Rc <= std_logic_vector(to_unsigned(13, addr_Ra'length));
    addr_Rb <= std_logic_vector(to_unsigned(13, addr_Ra'length));
    
    wait for CLOCK_PERIOD*2;
    
    writeEN <= '1';
    
    wait for CLOCK_PERIOD*2;
    
    writeEN <= '0';
    
    wait for CLOCK_PERIOD*2;
    
	reset <= '1';
	
	wait for CLOCK_PERIOD*2;
	
	wait;
end process;

end testbench;